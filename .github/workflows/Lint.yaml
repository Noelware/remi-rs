# üêª‚Äç‚ùÑÔ∏èüß∂ remi-rs: Robust, and simple asynchronous Rust crate to handle storage-related communications with different storage providers
# Copyright (c) 2022-2024 Noelware, LLC. <team@noelware.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: CI
on:
    workflow_dispatch: {}
    pull_request:
        types: [opened, synchronize]
        branches:
            - master

        paths-ignore:
            - 'assets/**'
            - .dockerignore
            - .gitignore
            - '**.md'
            - LICENSE
            - renovate.json
    push:
        branches:
            - 'issue/gh-**'
            - 'feat/**'
            - master

        paths-ignore:
            - '.github/**'
            - '.coder/**'
            - '.vscode/**'
            - 'assets/**'
            - '.*ignore'
            - '**.md'
            - LICENSE
            - renovate.json
jobs:
    rust:
        name: Rust CI [${{matrix.rust-version}} on ${{matrix.runner == 'ubuntu-latest' && 'Linux (x86_64)' || matrix.runner == 'windows-latest' && 'Windows' || matrix.runner == 'macos-latest' && 'macOS' || matrix.runner == 'self-hosted' && 'Linux (arm64)' || matrix.runner}}]
        runs-on: ${{matrix.runner}}
        strategy:
            matrix:
                rust-version: [stable, nightly]
                runner: [ubuntu-latest, windows-latest, macos-latest]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Rust toolchain
              uses: dtolnay/rust-toolchain@master
              with:
                toolchain: ${{matrix.rust-version}}
                components: clippy, rustfmt

            - name: Setup Rust cache
              uses: Swatinem/rust-cache@v2

            - name: Install `cargo-nextest`
              uses: taiki-e/install-action@cargo-nextest
              with:
                tool: cargo-nextest

            # On Windows, we'll also need nasm for use with BoringSSL via aws-lc-sys.
            - name: Install NASM
              uses: ilammy/setup-nasm@v1
              if: matrix.runner == 'windows-latest'

            - name: Pull dependencies
              run: cargo build --workspace --all-features

            - name: Run tests
              run: cargo nextest run --workspace --all-features

            # nextest doesn't run doctests, so we have to use libtest instead
            - name: Run doctests
              run: cargo test --doc --workspace --all-features
    clippy:
        name: Clippy
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Rust toolchain
              uses: dtolnay/rust-toolchain@master
              with:
                toolchain: stable
                components: clippy, rustfmt

            - name: Setup Rust cache
              uses: Swatinem/rust-cache@v2

            - name: Clippy!
              uses: auguwu/clippy-action@1.4.0
              with:
                all-features: true
                token: ${{secrets.GITHUB_TOKEN}}
    cargo-deny:
        name: '`cargo deny`'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install `cargo-deny`
              uses: taiki-e/install-action@cargo-deny
              with:
                  tool: cargo-deny

            - name: Run "cargo deny"
              run: cargo deny check all
    report-missing-deps:
        name: Report Missing Dependencies
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install `cargo-machete`
              uses: taiki-e/install-action@cargo-machete
              with:
                  tool: cargo-machete

            - name: Run!
              run: cargo machete
